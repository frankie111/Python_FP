"""
Gegeben sei eine Listevon Zahlenin der Form xy.
Schreiben Sie eine PythonKonsolenanwendung, welche jededer folgenden Aufgabenlöst.
JedeAufgabe soll in einer Funktion umgesetzt sein.

1. Entfernen Sie die Zahlen die sich wiederholen.

2. Schreiben Sie die Anzahl von symmetrischen Paaren(xy)und (yx).

3.Generieren Sie die größte mögliche Zahl, die aus der Konkatenation der Elemente der Liste gebildet ist.

4. Verschlüsseln Sie die Elemente der Liste, indem Sie das erste Element als Schlüssel benützen und die Methode
selbst wählen (+, *, XOR).

5. Filtern Sie die Zahlen, die eine bestimmte Beziehung zwischen Zahlen haben, die in einem String angegeben wird.(
z.B:“x=y*3”, “x/y=2“, ...)

6. Finden Sie die längste zusammenhängendeDominoTeilfolge. Eine Dominoteilfolge ist definiert als x1y1, x2y2,
wo y1=x2. (z.B: 89, 95, 54)

7. Finden Sie den kleinsten gemeinsamen Vielfachen zwischen Index from und to, welche gegeben sind.

"""


def remove_duplicates(liste):
    """
    Removes duplicate numbers from a list
    :param liste: A list of integers
    :returns: A modified version of [liste] without duplicates
    """
    return list(dict.fromkeys(liste))


def min_number(num):
    """
    Returns the minimum number generated from the digits of [num]
    :param num: integer of form xy
    :returns: num: in form xy, if x < y else yx or None
    """
    if num is None:
        return None

    num = str(num)
    if num[0] < num[1]:
        return int(num)

    return int(num[1]) * 10 + int(num[0])


def symmetric_pairs_count(liste):
    """
    Returns the number of symmetric pairs (xy - yx) in a list
    :param liste: A list of integers
    :return pair_count:
    """
    ct_dict = {}
    for i in liste:
        num = min_number(i)
        if num in ct_dict.keys():
            ct_dict[num] += 1
        else:
            ct_dict[num] = 1

    pair_count = 0
    for count in ct_dict.values():
        pair_count += count // 2

    return pair_count


def max_concat(liste):
    """
    Returns the largest number generated by concatenating the elements in a list
    :param liste: A list of integers
    :return num: A string representation of the largest number
    :rtype: String
    """
    sorted_list = liste.copy()
    sorted_list.sort(reverse=True)
    num = ""
    for i in sorted_list:
        num += str(i)
    return num


def simple_encrypt(liste):
    """
    Encrypts list elements by XOR operation with the key (first element)
    :param liste:
    """
    key = liste[0]
    for i in range(1, len(liste)):
        liste[i] ^= key


def filter_by(liste, rule):
    """
    filter a list by the specified rule
    :param liste: A list of integers
    :param rule: A string representing the filter rule
    :return filtered_list:
    """
    rule = str(rule).replace("=", "==")
    filtered_list = []

    for i in liste:
        x = i // 10
        y = i % 10
        if eval(rule):
            filtered_list.append(i)

    return filtered_list


def max_domino(liste):
    """
    Return longest "domino" sequence in a list
    :param liste: A list of integers
    :return mx:
    """
    aux = [liste[0]]
    mx = []

    for i in range(1, len(liste)):
        y = liste[i - 1] % 10
        x = liste[i] // 10
        if x == y:
            aux.append(liste[i])
        else:
            if len(aux) > len(mx):
                mx = aux
            aux = [liste[i]]

    if len(aux) > len(mx):
        mx = aux

    return mx


def ggt(x, y):
    while x != y:
        if x > y:
            x -= y
        else:
            y -= x
    return x


def kgv(x, y):
    return x * y // ggt(x, y)


def kgv_in_range(liste, start=0, end=0):
    if end == 0:
        end = len(liste)

    if end - start < 1:
        raise Exception("Function only applicable on two or more numbers")

    if end > len(liste):
        raise Exception("End index " + str(end) + " out of bounds")

    _kgv = kgv(liste[start], liste[start + 1])
    for i in range(start + 2, end):
        _kgv = kgv(_kgv, liste[i])
    return _kgv


# kgv(x,y) = x*y/ggt(x,y)

zahlen_liste = [30, 40, 44, 60, 121, 12, 21, 12, 21, 22]  # [15, 31, 12, 24, 44, 45, 43, 21, 34, 78, 62, 43, 65]
# print(filter_by(zahlen_liste, "x=y*3"))
# print(kgv_in_range(zahlen_liste))
print(max_domino(zahlen_liste))
